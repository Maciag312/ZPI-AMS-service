plugins {
    id 'org.springframework.boot' version '2.5.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'info.solidsoft.pitest' version '1.5.1'
    id 'groovy'
}

group = 'com'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

ext {
    junitVersion = '5.7.2'
    spockVersion = '2.0-M4-groovy-3.0'
    groovyVersion = '3.0.6'
    openApiUiVersion = '1.5.9'
    jsonwebtokenVersion = '0.11.2'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-devtools')
    implementation('org.springframework.boot:spring-boot-starter-data-rest')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-security')

    implementation('org.springframework.security:spring-security-crypto')

    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation("org.springdoc:springdoc-openapi-ui:${openApiUiVersion}")

    implementation("io.jsonwebtoken:jjwt-impl:${jsonwebtokenVersion}")
    implementation("io.jsonwebtoken:jjwt-api:${jsonwebtokenVersion}")
    implementation("io.jsonwebtoken:jjwt-jackson:${jsonwebtokenVersion}")

    compileOnly('org.projectlombok:lombok')
    runtimeOnly('com.h2database:h2')
    annotationProcessor('org.projectlombok:lombok')

    testImplementation(platform("org.junit:junit-bom:${junitVersion}"))
    testImplementation('org.junit.jupiter:junit-jupiter')

    testImplementation("org.spockframework:spock-core:${spockVersion}")
    testImplementation("org.spockframework:spock-spring:${spockVersion}")
    testImplementation("org.codehaus.groovy:groovy:${groovyVersion}")
    testImplementation("org.codehaus.groovy:groovy-json:${groovyVersion}")

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

test {
    useJUnitPlatform()
}

pitest {
    junit5PluginVersion = '0.12'
}

task buildUI(type: Exec) {
    commandLine './scripts/buildUI.sh'
}

task dockerImage(type: Exec) {
    commandLine 'docker', 'build', '-t', 'zpi/service', '.'
}

dockerImage.dependsOn buildUI
dockerImage.dependsOn bootJar
